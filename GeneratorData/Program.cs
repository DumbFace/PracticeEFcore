using ConventionPractice.Data;
using Microsoft.EntityFrameworkCore;
using ConventionPractice.Core;
using GeneratorData.ReadJson;
using GeneratorData.Model;
using GeneratorData.Services;
using AutoMapper;
using Serilog;
using GeneratorData.Helpers.Constaints;
using Microsoft.Extensions.DependencyInjection;
using GeneratorData.MapperProfiles;
using GeneratorData.Services.UpdateStudentServices;
using System.Diagnostics;
using GeneratorData.Services.JsonReaderServices;

namespace GeneratorData;

public class Program
{
    public Program()
    {
        ConfigureServices(new ServiceCollection());
    }

    public static void ConfigureServices(IServiceCollection services)
    {
        Log.Logger = new LoggerConfiguration()
           .Enrich.FromLogContext()
           .WriteTo.Console()
           .WriteTo.File("Log/log.txt", rollingInterval: RollingInterval.Day)
           .CreateLogger();

        services.AddTransient(typeof(IJsonReader<>), typeof(JsonReader<>));

        services.AddScoped<IUpdateEmail, UpdateService>();
        services.AddDbContext<ApplicationDbContext>(options =>
                  options.UseSqlServer("Server=.\\EXPRESSKHANG;Database=PracticeConvention;Trusted_Connection=True;TrustServerCertificate=True"));
        services.AddMemoryCache();
        services.AddAutoMapper(AppDomain.CurrentDomain.GetAssemblies());
        Globals.serviceProvider = services.BuildServiceProvider();


        Globals.context = Globals.serviceProvider.GetService<ApplicationDbContext>();
    }


    static void Main(string[] args)
    {
        new Program();
        AutoGenerateData();
        // UpdateEmailStudent();
    }

    public static void AutoGenerateData()
    {
        IMapper mapper = Globals.serviceProvider.GetService<IMapper>();
        int[] ages = new int[] { 18, 19, 20, 21, 22, 23, 24, 25, 26 };

        //Tạo đối tượng đọc file json
        IJsonReader<RootCourseJson> courseJson = Globals.serviceProvider.GetService<IJsonReader<RootCourseJson>>();
        IJsonReader<RootAddressJson> addressJson = Globals.serviceProvider.GetService<IJsonReader<RootAddressJson>>();
        IJsonReader<List<string>> nameJson = Globals.serviceProvider.GetService<IJsonReader<List<string>>>();

        //Lấy danh sách course, address, student trong json
        RootCourseJson rootCourse = courseJson.ConvertToModel("F:\\Repo\\PracticeEFcore\\GeneratorData\\Json\\courses.json");
        RootAddressJson rootAddress = addressJson.ConvertToModel("F:\\Repo\\PracticeEFcore\\GeneratorData\\Json\\addresses.json");
        List<string> lstName = nameJson.ConvertToModel("F:\\Repo\\PracticeEFcore\\GeneratorData\\Json\\names.json");

        Stopwatch stopWatch = new Stopwatch();
        List<Grade> grades = new List<Grade>();
        while (true)
        {
            try
            {
                Student student = new Student
                {
                    Name = Utils.GetRandomItem<string>(lstName),
                    Age = Utils.GetRandomItem<int>(ages.ToList()),
                    DateBirth = Utils.GetRandomDateTime(),
                    Address = mapper.Map<Address>(Utils.GetRandomItem<AddressModelJson>(rootAddress.Addressess)),
                    Gender = Utils.GetRandomItem<Gender>(Enum.GetValues(typeof(Gender)).Cast<Gender>().ToList()),
                };

                Course course = mapper.Map<Course>(Utils.GetRandomItem<CourseJsonModel>(rootCourse.Courses));

                Grade grade = new Grade
                {
                    Student = student,
                    Course = course,
                    Score = Utils.GetRandomItem<Score>(Enum.GetValues(typeof(Score)).Cast<Score>().ToList())
                };
                grades.Add(grade);

                //Mỗi lần 10000 record ghi vào log
                if (grades.Count == 100000)
                {

                    try
                    {
                        Globals.context.Grades.AddRange(grades);
                        Globals.context.SaveChanges();

                        Log.Information($"Student Record: {student.StudentId}");
                        grades.Clear();

                    }
                    catch (DbUpdateException ex)
                    {
                        Log.Error($"An error occurred while saving the entity changes. {ex.InnerException.Message}");
                    }
                    // db.Grades.AddRange(grades);
                    // db.SaveChanges();

                    // Log.Information($"Student Record: {student.StudentId}");
                }
            }
            catch (Exception ex)
            {
                Log.Error($"Insert Table: {ex.Message}");
            }
        }

    }

    public static void UpdateEmailStudent()
    {
        var UpdateService = Globals.serviceProvider.GetService<IUpdateEmail>();
        UpdateService.UpdateEmail();
    }
}
