using ConventionPractice.Data;
using Microsoft.EntityFrameworkCore;
using ConventionPractice.Core;
using GeneratorData.ReadJson;
using GeneratorData.Model;
using GeneratorData.Services;
using AutoMapper;
using Serilog;
using GeneratorData.Helpers.Constaints;
using Microsoft.Extensions.DependencyInjection;
using GeneratorData.MapperProfiles;
using GeneratorData.Services.UpdateStudentServices;

namespace GeneratorData;

public class Program
{
    public Program()
    {
        ConfigureServices(new ServiceCollection());
    }

    public static void ConfigureServices(IServiceCollection services)
    {
        Log.Logger = new LoggerConfiguration()
           .Enrich.FromLogContext()
           .WriteTo.Console()
           .WriteTo.File("Log/log.txt", rollingInterval: RollingInterval.Day)
           .CreateLogger();

        services.AddTransient(typeof(IReadJson<>), typeof(CourseServiceJson<>));
        services.AddTransient(typeof(IReadJson<>), typeof(AddressServiceJson<>));
        services.AddTransient(typeof(IReadJson<>), typeof(NameServiceJson<>));
        services.AddScoped<IUpdateEmail, UpdateService>();

        services.AddDbContext<ApplicationDbContext>(options =>
         options.UseSqlServer("Server=.\\EXPRESSKHANG;Database=PracticeConvention;Trusted_Connection=True;TrustServerCertificate=True;MultipleActiveResultSets=True"));

        services.AddAutoMapper(AppDomain.CurrentDomain.GetAssemblies());
        Globals.serviceProvider = services.BuildServiceProvider();
    }

    public static void AutoGenerateData()
    {
        IMapper mapper = Globals.serviceProvider.GetService<IMapper>();

        int[] ages = new int[] { 18, 19, 20, 21, 22, 23, 24, 25, 26 };



        //Tạo đối tượng đọc file json
        IReadJson<RootCourseJson> courseJson = Globals.serviceProvider.GetService<IReadJson<RootCourseJson>>();
        IReadJson<RootAddressJson> addressJson = new AddressServiceJson<RootAddressJson>();
        IReadListJson<string> nameJson = new NameServiceJson<string>();

        //Lấy danh sách course, address, student trong json
        RootCourseJson rootCourse = courseJson.ReadJson("F:\\Repo\\PracticeEFcore\\GeneratorData\\Json\\courses.json");
        RootAddressJson rootAddress = addressJson.ReadJson("F:\\Repo\\PracticeEFcore\\GeneratorData\\Json\\addresses.json");
        List<string> lstName = nameJson.ReadListJson("F:\\Repo\\PracticeEFcore\\GeneratorData\\Json\\names.json");

        var options = new DbContextOptionsBuilder<ApplicationDbContext>()
            .UseSqlServer("Server=.\\EXPRESSKHANG;Database=PracticeConvention;Trusted_Connection=True;TrustServerCertificate=True;MultipleActiveResultSets=True")
            .Options;
        int count = 0;
        while (true)
        {
            using (var db = new ApplicationDbContext(options))
            {
                try
                {
                    Student student = new Student
                    {
                        Name = Utils.GetRandomItem<string>(lstName),
                        Age = Utils.GetRandomItem<int>(ages.ToList()),
                        DateBirth = Utils.GetRandomDateTime(),
                        Address = mapper.Map<Address>(Utils.GetRandomItem<AddressModelJson>(rootAddress.Addressess)),
                        Gender = Utils.GetRandomItem<Gender>(Enum.GetValues(typeof(Gender)).Cast<Gender>().ToList()),
                    };

                    Course course = mapper.Map<Course>(Utils.GetRandomItem<CourseJsonModel>(rootCourse.Courses));

                    Grade grade = new Grade
                    {
                        Student = student,
                        Course = course,
                        Score = Utils.GetRandomItem<Score>(Enum.GetValues(typeof(Score)).Cast<Score>().ToList())
                    };

                    db.Grades.Add(grade);
                    db.SaveChanges();

                    //Mỗi lần 1000 record ghi vào log
                    if (count == 1000)
                    {
                        Log.Information($"Student Record: {student.StudentId}");
                        count = 0;
                    }
                    count++;
                }
                catch (Exception ex)
                {
                    Log.Error($"Insert Table: {ex.Message}");
                }
            }
        }

    }


    public static void UpdateEmailStudent()
    {
        var UpdateService = Globals.serviceProvider.GetService<IUpdateEmail>();
        UpdateService.UpdateEmail();
    }

    static void Main(string[] args)
    {
        new Program();
        // AutoGenerateData();
        UpdateEmailStudent();
    }

}
